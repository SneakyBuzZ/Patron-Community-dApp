// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Nounce {
  id            String @id @default(cuid())
  walletAddress String @unique
  nounce        String @unique

  @@map("nounce")
}

model User {
  id        String   @id @default(cuid())
  name      String
  address   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     String?  @default("https://i.pinimg.com/564x/9b/b0/66/9bb066864b0d225c324551ee2c83125d.jpg")

  ownerOf     Group[]
  memberof    GroupUser[]
  posts       Post[]       @relation(name: "ownership")
  comments    Comment[]
  solvedPosts BountyPost[] @relation(name: "userWhoSolved")

  @@map("users")
}

model Group {
  id               String @id @default(cuid())
  groupName        String
  groupDescription String
  groupCoverImage  String
  ownerId          String
  owner            User   @relation(fields: [ownerId], references: [id])

  members GroupUser[]
  posts   Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("groups")
}

model GroupUser {
  id      String @id @default(cuid())
  groupId String @unique
  userId  String @unique
  group   Group  @relation(fields: [groupId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@map("group_users")
}

model Post {
  id              String  @id @default(cuid())
  postImage       String?
  postTitle       String
  postDescription String
  ownerId         String
  onwner          User    @relation(fields: [ownerId], references: [id], name: "ownership")
  groupId         String
  group           Group   @relation(fields: [groupId], references: [id])

  comment Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

model BountyPost {
  id String @id @default(cuid())

  bountyAmount Float

  whoSolvedId String?
  whoSolved   User?   @relation(fields: [whoSolvedId], references: [id], name: "userWhoSolved")
  isSolved    Boolean @default(false)

  @@map("bounty_posts")
}

model Comment {
  id      String @id @default(cuid())
  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])
  postId  String
  post    Post   @relation(fields: [postId], references: [id])

  @@map("comments")
}
